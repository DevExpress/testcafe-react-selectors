/*global document window*/
var testcafe = require('testcafe');
var Selector = testcafe.Selector;
var ClientFunction = testcafe.ClientFunction;


const waitForReact = ClientFunction({{{waitForReact}}});

const ReactSelector = Selector(selector => {
    const getRootElsReact15 = {{{getRootElsReact15}}}
    const getRootElsReact16 = {{{getRootElsReact16}}}
    const selectorReact15 = {{{selectorReact15}}}
    const selectorReact16 = {{{selectorReact16}}}
    const visitedRootEls = [];
    let rootEls = null;

    function checkRootNodeVisited (component) {
        return visitedRootEls.indexOf(component) > -1;
    }

    function defineSelectorProperty (value) {
        if (window['%testCafeReactSelector%']) delete window['%testCafeReactSelector%'];

        Object.defineProperty(window, '%testCafeReactSelector%', {
            enumerable:   false,
            configurable: true,
            writable:     false,
            value:        value
        });
    }

    rootEls = getRootElsReact15();

    if(rootEls.length) {
        window['%testCafeReactVersion%'] = 15;

        return selectorReact15(selector);
    }

    rootEls = getRootElsReact16();

    if(rootEls.length) {
        window['%testCafeReactVersion%'] = 16;

        return selectorReact16(selector);
    }

    throw new Error('testcafe-react-selectors supports React version 15.x and newer');
}).addCustomMethods({
    getReact: (node, fn) => {
        const reactVersion = window['%testCafeReactVersion%'];
        const getReactReact15 = {{{getReactReact15}}}
        const getReactReact16 = {{{getReactReact16}}}

        delete window['%testCafeReactVersion%'];

        if(reactVersion === 15)
            return getReactReact15(node, fn);
        if(reactVersion === 16)
            return getReactReact16(node, fn);
    }
});

export { waitForReact, ReactSelector };